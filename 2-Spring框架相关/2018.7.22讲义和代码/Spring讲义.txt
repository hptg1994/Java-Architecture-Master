      代理模式实现步骤：
       1.声明接口：注册需要被监听行为名称
       2.接口实现类： 扮演被监控的类，负责被监听方法实现细节
       3.InvocationHanler接口实现类：
                                    1.次要业务/增强业务
                                    2.将次要业务与被监听方法绑定执行
       4.代理监控对象：
                        被监控类内存地址，被监控类实现的接口，
                        InvocationHandler实现类的实例对象

      Spring AOP:简化代理模式实现步骤
          1.声明接口：注册需要被监听行为名称
          2.接口实现类： 扮演被监控的类，负责被监听方法实现细节
          3.次要业务/增强业务

      Spring AOP 通知种类：设置次要业务与（被监听方法）绑定执行顺序问题

          1.前置通知：
                       1）切面：次要业务方法
                       2) 执行切入点：被拦截的主要业务方法
          2.后置通知：
                       1）执行切入点：被拦截的主要业务方法
                       2）切面：次要业务方法  
          3.环绕通知：
                        1）切面1：次要业务方法
                        2) 执行切入点：被拦截的主要业务方法
                        1）切面2：次要业务方法
 
          4.异常通知：
                        try{
                              执行切入点：被拦截的主要业务方法
                            }catch(Exception ){
                                 切面
                          }

        Spring AOP Advice接口：只能对当前接口下所有的实现类进行次要业务绑定执行，无法动态指定

        Spring AOP  Advisor:(顾问)

                    1.一种织入方式
                    2.实际上Adivce封装版。
                    3.可以动态的将切面指定对应切入点

                    
       Spring AOP Advisor继承实现关系

                                            Advisor

                            PointCutAdvisor:可以灵活的指定当前接口下的哪一个实现类中哪一个方法与次要业务
                                            进行绑定

                        Advice                       PointCut
                       (次要业务)                 (目标对象和目标方法)
                                         
                                      ClassFilter                          MethodMatcher
                           （判断当前被拦截对象是不是当前顾问需要管理对象）  (当前被拦截的方法是不是我们所需要主要业务方法)                         person对象。eat()





















